#include <iostream>

int find_pivot(int *arr, int low, int high)
{

    int mid;
    while (low < high)
    {
        mid = (low + high) / 2;

        if (arr[mid] < arr[mid - 1])
            return mid;
        if (arr[mid] > arr[mid + 1])
            return mid + 1;

        // now go towards the problem
        // check first where is the problem.
        if (arr[mid] < arr[high])
            // go towards left
            return find_pivot(arr, low, mid - 1);
        return find_pivot(arr, mid + 1, high);
    }
    return 0;
}
int binary_search(int *arr, int value, int low, int high)
{
    int mid;
    if (low > high)
        return -1;

    mid = low + ((high - low) / 2);

    if (arr[mid] == value)
        return mid;
    else if (arr[mid] < value)
        return binary_search(arr, value, mid + 1, high);
    else
        return binary_search(arr, value, low, mid - 1);
}


int search_in_rotated_array(int*arr,int value,int size){

            int pivot = find_pivot(arr,0,size-1);

            int right,left;
            if(arr[pivot]==value)   
                return pivot;
            right = binary_search(arr,value,pivot+1,size-1); // search in right of pivot
            left = binary_search(arr,value,0,pivot-1);// search in left of pivot

        return (right==-1)?left:right; // if not found in right then return the left otherwise right.
}
int main(){


    int arr[6]={1,2,3,4,5,6};
    int size=sizeof(arr)/sizeof(int);
   
    printf("%d",search_in_rotated_array(arr,2,size));


}